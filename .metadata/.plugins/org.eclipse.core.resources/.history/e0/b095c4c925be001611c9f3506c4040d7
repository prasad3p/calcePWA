package calePWA;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


public class CombineFiles5 {

	private static String FILENAME =System.getProperty("user.home") +"\\Desktop\\calecPWA\\nodes (1).txt";
	private static String FILENAME2 =System.getProperty("user.home") +"\\Desktop\\calecPWA\\displacement.txt";
	private static String home = System.getProperty("user.home")+"\\Desktop\\calecPWA\\Result2.xlsx";
	
	public static void main(String[] args) throws IOException {
		
		String sCurrentLine = null;
		String sCurrentLine2 = null;
		
		PrintWriter writer = new PrintWriter(System.getProperty("user.home")+"\\Desktop\\calecPWA\\Result2.txt");
		PrintWriter writer2 = new PrintWriter(System.getProperty("user.home")+"\\Desktop\\calecPWA\\Result2.txt");
		Pattern patt = Pattern.compile(" \\d+ 0*");
		
		BufferedReader br = new BufferedReader(new FileReader(FILENAME));
		BufferedReader br2 = new BufferedReader(new FileReader(FILENAME2));
		ArrayList <NodeCord> NodeCr = new ArrayList<NodeCord>();
		ArrayList <NodeVal> NodeVal= new ArrayList<NodeVal>();
		XSSFWorkbook workbook = new XSSFWorkbook(); 
	    XSSFSheet spreadsheet = workbook.createSheet("Node details");
	    XSSFRow row=spreadsheet.createRow(0);
	    Cell cell=row.createCell(0);
	    cell.setCellValue("Node");
	    Cell cell1=row.createCell(1);
	    cell1.setCellValue("X");
	    Cell cell2=row.createCell(2);
	    cell2.setCellValue("Y");
	    Cell cell3=row.createCell(3);
	    cell3.setCellValue("Z");
	    Cell cell4=row.createCell(4);
	    cell4.setCellValue("Value");
	    int rowId=1;
	   
		while(true){
			
			Node node = new Node(0,0, 0, 0, 0);
			while((sCurrentLine2 = br2.readLine()) != null){
				Matcher m = patt.matcher(sCurrentLine2);
				if(m.find())
				{
						int st = m.start(0);
						int en = m.end(0);
						String sub = sCurrentLine2.substring(st, en);
						writer.println(sub);
						System.out.println(sub);
						//String[] splits = sCurrentLine2.split("\\s+");
						//node.setNodeNum(Integer.valueOf(splits[1]));
						//node.setValue(Double.parseDouble(splits[2]));
						//flag2=1;
						break;
					
				}
				sCurrentLine2=null;
	
			}
			
			//writer.flush();

			while((sCurrentLine = br.readLine()) != null){
				Matcher m = patt.matcher(sCurrentLine);
				if(m.find())
				{
						
						int st = m.start(0);
						int en = m.end(0);
						String sub = sCurrentLine.substring(st, en);
						writer.println(sub);
						System.out.println(sub);
						//String[] splits = sCurrentLine.split("\\s+");
						//node.setNodeNum(Integer.valueOf(splits[1]));
						//node.setxCord(Double.parseDouble(splits[2]));
						//node.setyCord(Double.parseDouble(splits[3]));
						//node.setzCord(Double.parseDouble(splits[4]));
						//flag1=1;
						break;
				}
				sCurrentLine=null;
				
			}
			
			//rowId=writeToExcel(NodeCr,NodeVal,rowId,row,spreadsheet,workbook);
			rowId++;
			//System.out.println(node.getNodeNum()+" coords: "+node.getxCord()+ " "+node.getyCord()+ " "+node.getzCord());
			//writer.println(node.getNodeNum()+" coords: "+node.getxCord()+ " "+node.getyCord()+ " "+node.getzCord());
			//System.out.println(node.getNodeNum()+" val: "+ node.getValue());
			//writer.println(node.getNodeNum()+" val: "+ node.getValue());
			if(sCurrentLine==null && sCurrentLine2==null) break;
					
		}
		writer.close();
		
	}
	
	public static int writeToExcel(ArrayList <NodeCord> NC, ArrayList <NodeVal> NV,int rowId, XSSFRow row, XSSFSheet spreadsheet, XSSFWorkbook workbook) throws IOException{
		
		// TODO Auto-generated method stub
  
	    for(int i=0;i<NC.size();i++){
	    	int j=0;
	    	row=spreadsheet.createRow(rowId++);
	    	Cell cellx=row.createCell(j++);
	    	cellx.setCellValue(NC.get(i).getNodeNum());
	    	Cell celly=row.createCell(j++);
	    	celly.setCellValue(NC.get(i).getxCord());
	    	Cell cellz=row.createCell(j++);
	    	cellz.setCellValue(NC.get(i).getyCord());
	    	Cell cellw=row.createCell(j++);
	    	cellw.setCellValue(NC.get(i).getzCord());
	    	Cell cellv=row.createCell(j);
	    	cellv.setCellValue(NV.get(i).getValue());
	    }
	    FileOutputStream out = new FileOutputStream(new File(home));
		workbook.write(out);
		out.close();
		return rowId;
		
	}
	/*private static ArrayList<NodeVal> addNodeValuesToList(String sCurrentLine, ArrayList<NodeVal> nodeVal, BufferedReader br) throws IOException {
	// TODO Auto-generated method stub
	if(sCurrentLine.replaceAll("\\s+","").equals("NODEUZ"))
	{
		sCurrentLine = br.readLine();
		do
		{
			if(sCurrentLine.replaceAll("\\s+","").equals("NODEUZ"))
				break;
			if(sCurrentLine.replaceAll("\\s+","").equals(""))
				break;
			String[] splits = sCurrentLine.split("\\s+");
			NodeVal nodV = new NodeVal(0,0);
			nodV.setNodeNum(Integer.valueOf(splits[1]));
			nodV.setValue(Double.parseDouble(splits[2]));
			nodeVal.add(nodV);
		}while((sCurrentLine = br.readLine())!=null);
		
	}
	return nodeVal;
}
private static ArrayList<NodeCord> addNodeCordsToList(String sCurrentLine, ArrayList<NodeCord> nodeCr, BufferedReader br) throws IOException {
	// TODO Auto-generated method stub
	if(sCurrentLine.replaceAll("\\s+","").equals("NODEXYZTHXYTHYZTHZX"))
	{
		sCurrentLine = br.readLine();
		do
		{
			if(sCurrentLine.replaceAll("\\s+","").equals("NODEXYZTHXYTHYZTHZX"))
				break;
			if(sCurrentLine.replaceAll("\\s+","").equals(""))
				break;
			String[] splits = sCurrentLine.split("\\s+");
			NodeCord node = new NodeCord(0,0,0,0);
			node.setNodeNum(Integer.valueOf(splits[1]));
			node.setxCord(Double.parseDouble(splits[2]));
			node.setyCord(Double.parseDouble(splits[3]));
			node.setzCord(Double.parseDouble(splits[4]));
			nodeCr.add(node);
			
		}while((sCurrentLine = br.readLine())!=null);
		
	}

	return nodeCr;
}*/
}
